#include "BigInteger.h"#include <random>#include <fstream>#include <iostream>BigInteger createRandomNumber(BigInteger modulo);unsigned long int createRandomWord(unsigned long int max);BigInteger createM();BigInteger createR();BigInteger createV();BigInteger createRInv();BigInteger createOne();void resetFile();BigInteger createRandomNumber(BigInteger modulo) {    vector<unsigned long int> output_vector;    output_vector.reserve(8);    BigInteger output;    for (int i = 0; i < 8; ++i) {        output_vector.push_back(createRandomWord(modulo.getNumber()[i]));    }    output = BigInteger(output_vector);    return output;}unsigned long int createRandomWord(unsigned long int max) {    std::random_device rd;    std::mt19937 generator(rd());    std::uniform_int_distribution<unsigned long int> distribution(0, max);    return distribution(generator);}BigInteger createM() {    vector<unsigned long int> output;    output.insert(output.begin(), 77231257);    output.insert(output.begin(), 1127892202);    output.insert(output.begin(), 3361461958);    output.insert(output.begin(), 609706960);    output.insert(output.begin(), 732630486);    output.insert(output.begin(), 741348343);    output.insert(output.begin(), 273281974);    output.insert(output.begin(), 77231257);    return BigInteger(output);}BigInteger createV() {    vector<unsigned long int> output;    output.insert(output.begin(), 39268967);    output.insert(output.begin(), 1366820466);    output.insert(output.begin(), 2876693927);    output.insert(output.begin(), 3238416330);    output.insert(output.begin(), 855634321);    output.insert(output.begin(), 2974246257);    output.insert(output.begin(), 192662492);    output.insert(output.begin(), 3601948759);    std::reverse(output.begin(), output.end());    return BigInteger(output);}BigInteger createRInv() {    vector<unsigned long int> output;    output.insert(output.begin(), 22596059);    output.insert(output.begin(), 283010752);    output.insert(output.begin(), 1669085634);    output.insert(output.begin(), 4252753748);    output.insert(output.begin(), 2094162827);    output.insert(output.begin(), 2940386834);    output.insert(output.begin(), 2229472048);    output.insert(output.begin(), 236900486);    std::reverse(output.begin(), output.end());    return BigInteger(output);}BigInteger createR() {    vector<unsigned long int> output;    output.insert(output.begin(), 0);    output.insert(output.begin(), 0);    output.insert(output.begin(), 0);    output.insert(output.begin(), 0);    output.insert(output.begin(), 0);    output.insert(output.begin(), 0);    output.insert(output.begin(), 0);    output.insert(output.begin(), 134217728);    return BigInteger(output);}BigInteger createOne() {    vector<unsigned long int> output;    output.push_back(1);    return BigInteger(output);}void resetFile() {    string const file("../data.txt");    ofstream flux(file.c_str());}int main() {    resetFile();    BigInteger m = BigInteger(createM());    BigInteger r = BigInteger(createR());    BigInteger rInv = BigInteger(createRInv());    BigInteger v = BigInteger(createV());    BigInteger one = BigInteger(createOne());    BigInteger a = BigInteger(createRandomNumber(m));    BigInteger b = BigInteger(createRandomNumber(m));    BigInteger phia = a.modularMultiplication(r * r, m, v, r);    BigInteger phib = b.modularMultiplication(r * r, m, v, r);    BigInteger phic = phia.modularMultiplication(phib, m, v, r);    BigInteger result = phic.modularMultiplication(one, m, v, r);    a.writeFile();    b.writeFile();    r.writeFile();    v.writeFile();    m.writeFile();    phia.writeFile();}